2025-10-16
인텔리제이 환경에서 자꾸
java.lang.IllegalArgumentException: Name for argument of type [java.lang.String] not specified, and parameter name information not available via reflection. Ensure that the compiler uses the '-parameters' flag.
이런에러뜸
gradle에서 intellij -> gradle로 바꾸고
java compiler에서 -parameters하니까 됨

build.gradle에서
    implementation platform("dev.langchain4j:langchain4j-bom:0.33.0")
	implementation 'dev.langchain4j:langchain4j-spring-boot-starter'
	implementation 'dev.langchain4j:langchain4j-open-ai-spring-boot-starter'
	이거 추가하자
application.properties에
langchain4j.open-ai.chat-model.api-key 뭐이런거 등록 많이해놨는데
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Spring Boot와 LangChain4j 스타터(starter)가 함께 동작하는 방식은 '자동 구성(Auto-Configuration)'이라는 기술 덕분입니다. 과정은 다음과 같습니다.

의존성 인식: build.gradle에 langchain4j-open-ai-spring-boot-starter를 추가하면, Spring Boot는 "아, 개발자가 OpenAI를 사용하고 싶어 하는구나"라고 인식합니다.

설정 파일 스캔: 애플리케이션이 시작될 때, Spring Boot는 application.properties 파일을 읽습니다. 그리고 langchain4j.open-ai.chat-model.* 로 시작하는 모든 속성을 찾습니다.  

Bean 자동 생성: langchain4j-open-ai-spring-boot-starter 라이브러리 안에는 미리 준비된 설정 코드가 들어있습니다. 이 코드는 2단계에서 읽어들인 API 키, 모델 이름, 온도(temperature) 등의 값을 사용하여 OpenAiChatModel이라는 객체를 완벽하게 설정한 후, 스프링의 관리 컨테이너에 ChatLanguageModel 타입의 빈(Bean)으로 등록합니다.  

@AiService 구현체 생성: langchain4j-spring-boot-starter는 @AiService 어노테이션이 붙은 Assistant 인터페이스를 발견합니다. 그리고 3단계에서 자동으로 만들어진 ChatLanguageModel 빈을 사용하여 Assistant 인터페이스의 구현체를 동적으로 생성합니다. 이 구현체는 chat 메서드가 호출되면 내부적으로 ChatLanguageModel을 통해 OpenAI API를 호출하도록 만들어집니다.  

의존성 주입: 마지막으로, Spring Boot는 AssistantController에 @RequiredArgsConstructor가 있으므로 생성자를 통해 Assistant 타입의 빈을 주입해달라는 요청을 받습니다. 이때 4단계에서 동적으로 생성된 Assistant 구현체를 주입해줍니다.

결론적으로, 개발자는 인터페이스와 속성 파일만 정의했을 뿐이지만, 스프링 부트 스타터가 이 둘을 연결하여 실제 동작하는 코드를 자동으로 만들어주는 것입니다. 이것이 바로 Spring Boot의 강력한 자동 구성 기능입니다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
